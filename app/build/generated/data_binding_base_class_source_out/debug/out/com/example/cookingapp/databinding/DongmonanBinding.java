// Generated by view binder compiler. Do not edit!
package com.example.cookingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cookingapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DongmonanBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView hinhanh;

  @NonNull
  public final LinearLayout itemLayout;

  @NonNull
  public final TextView txtnguyenlieu;

  @NonNull
  public final TextView txttendaubep;

  @NonNull
  public final TextView txttenmonan;

  private DongmonanBinding(@NonNull LinearLayout rootView, @NonNull ImageView hinhanh,
      @NonNull LinearLayout itemLayout, @NonNull TextView txtnguyenlieu,
      @NonNull TextView txttendaubep, @NonNull TextView txttenmonan) {
    this.rootView = rootView;
    this.hinhanh = hinhanh;
    this.itemLayout = itemLayout;
    this.txtnguyenlieu = txtnguyenlieu;
    this.txttendaubep = txttendaubep;
    this.txttenmonan = txttenmonan;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DongmonanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DongmonanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dongmonan, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DongmonanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.hinhanh;
      ImageView hinhanh = ViewBindings.findChildViewById(rootView, id);
      if (hinhanh == null) {
        break missingId;
      }

      LinearLayout itemLayout = (LinearLayout) rootView;

      id = R.id.txtnguyenlieu;
      TextView txtnguyenlieu = ViewBindings.findChildViewById(rootView, id);
      if (txtnguyenlieu == null) {
        break missingId;
      }

      id = R.id.txttendaubep;
      TextView txttendaubep = ViewBindings.findChildViewById(rootView, id);
      if (txttendaubep == null) {
        break missingId;
      }

      id = R.id.txttenmonan;
      TextView txttenmonan = ViewBindings.findChildViewById(rootView, id);
      if (txttenmonan == null) {
        break missingId;
      }

      return new DongmonanBinding((LinearLayout) rootView, hinhanh, itemLayout, txtnguyenlieu,
          txttendaubep, txttenmonan);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
